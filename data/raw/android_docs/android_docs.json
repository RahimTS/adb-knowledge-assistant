[
  {
    "url": "https://developer.android.com/tools/adb",
    "title": "\n      Android Debug Bridge (adb)\n\n\n      \n      Stay organized with collections\n    \n\n      \n      Save and categorize content based on your preferences.\n    \n\n",
    "content": "Android Debug Bridge (adb)  |  Android Studio  |  Android Developers\nSkip to main content\n/\nEnglish\nDeutsch\nEspañol – América Latina\nFrançais\nIndonesia\nItaliano\nPolski\nPortuguês – Brasil\nTiếng Việt\nTürkçe\nРусский\nעברית\nالعربيّة\nفارسی\nहिंदी\nবাংলা\nภาษาไทย\n中文 – 简体\n中文 – 繁體\n日本語\n한국어\nAndroid Studio\nSign in\nAndroid Studio\nAndroid Developers\nDevelop\nAndroid Studio\nSDK tools guides\nAndroid Debug Bridge (adb)\nStay organized with collections\nSave and categorize content based on your preferences.\nAndroid Debug Bridge (\nadb\n) is a versatile command-line tool that lets you communicate with a\ndevice. The\nadb\ncommand facilitates a variety of device actions, such as installing and\ndebugging apps.\nadb\nprovides access to a Unix shell that you can use to run a variety\nof commands on a device. It is a client-server program that includes three components:\nA client\n, which sends commands. The client runs on your development machine. You can\n    invoke a client from a command-line terminal by issuing an\nadb\ncommand.\nA daemon (adbd)\n, which runs commands on a device. The daemon runs as a background\n    process on each device.\nA server\n, which manages communication between the client and the daemon. The server\n    runs as a background process on your development machine.\nadb\nis included in the Android SDK Platform Tools package. Download this\npackage with the\nSDK Manager\n, which installs\nit at\nandroid_sdk\n/platform-tools/\n. If you want the standalone Android SDK\nPlatform Tools package,\ndownload it here\n.\nFor information on connecting a device for use over\nadb\n, including how to use the Connection\n  Assistant to troubleshoot common problems, see\nRun apps on a hardware device\n.\nHow adb works\nWhen you start an\nadb\nclient, the client first checks whether there is an\nadb\nserver process already running. If there isn't, it starts the server process.\nWhen the server starts, it binds to local TCP port 5037 and listens for commands sent from\nadb\nclients.\nNote:\nAll\nadb\nclients use port 5037 to communicate\n  with the\nadb\nserver.\nThe server then sets up connections to all running devices.\nIt locates emulators by scanning odd-numbered ports in the range\n5555 to 5585, which is the range used by the first 16 emulators. Where the server finds an\nadb\ndaemon (adbd), it sets up a connection to that port.\nEach emulator uses a pair of sequential ports — an even-numbered port for\nconsole connections and an odd-numbered port for\nadb\nconnections. For example:\nEmulator 1, console: 5554\nEmulator 1,\nadb\n: 5555\nEmulator 2, console: 5556\nEmulator 2,\nadb\n: 5557\nand so on.\nAs shown, the emulator connected to\nadb\non port 5555 is the same as the emulator\nwhose console listens on port 5554.\nOnce the server has set up connections to all devices, you can use\nadb\ncommands to\naccess those devices. Because the server manages connections to devices and handles\ncommands from multiple\nadb\nclients, you can control any device from any client or\nfrom a script.\nEnable adb debugging on your device\nTo use adb with a device connected over USB, you must enable\nUSB debugging\nin the device system settings, under\nDeveloper options\n. On Android 4.2 (API level 17) and higher, the\nDeveloper options\nscreen\nis hidden by default. To make it visible,\nenable\n  Developer options.\nYou can now connect your device with USB. You can verify that your device is\n    connected by executing\nadb devices\nfrom the\nandroid_sdk\n/platform-tools/\ndirectory. If connected,\n    you'll see the device name listed as a \"device.\"\nNote:\nWhen you connect a device running Android 4.2.2 (API\n    level 17) or higher, the system shows a dialog asking whether to accept an RSA key that allows\n    debugging through this computer. This security mechanism protects user devices because it ensures\n    that USB debugging and other adb commands cannot be executed unless you're able to unlock the\n    device and acknowledge the dialog.\nFor more information about connecting to a device over USB, read\nRun apps on a hardware device\n.\nConnect to a device over Wi-Fi\nNote:\nThe instructions below do not apply to Wear devices running\n  Android 11 (API level 30). See the guide to\ndebugging a Wear OS app\nfor\n  more information.\nAndroid 11 (API level 30) and higher support deploying and debugging your app wirelessly from\n    your workstation using Android Debug Bridge (adb). For example, you can deploy your debuggable\n    app to multiple remote devices without ever needing to physically connect your device via\n    USB. This eliminates the need to deal with common USB connection issues, such as driver\n    installation.\nBefore you begin using wireless debugging, do the following:\nEnsure that your workstation and device are connected to the same wireless network.\nEnsure that your device is running Android 11 (API level 30) or higher for phone or Android\n        13 (API level 33) or higher for TV and WearOS. For more information, see\nCheck & update your\n          Android version\n.\nIf using the IDE, ensure that you have the latest version of Android Studio installed. You can download it\nhere\n.\nOn your workstation, update to the latest version of the\nSDK Platform Tools\n.\nTo use wireless debugging, you must pair your device to your workstation using a QR code or a\n    pairing code. Your workstation and device must be connected to the same wireless network. To\n    connect to your device, follow these steps:\nEnable developer options\non your device.\nOpen Android Studio and select\nPair Devices Using Wi-Fi\nfrom the run\n        configurations menu.\nFigure 1.\nRun configurations menu.\nThe\nPair devices over Wi-Fi\nwindow pops up, as shown in figure 2.\nFigure 2.\nPopup window to pair devices using QR code or pairing\n            code.\nOn your device, tap\nWireless debugging\nand pair your device:\nFigure 3.\nScreenshot of the\nWireless debugging\nsetting on\n            a Google Pixel phone.\nTo pair your device with a QR code, select\nPair device with QR code\nand scan the\n            QR code obtained from the\nPair devices over Wi-Fi\npopup shown in figure 2.\nTo pair your device with a pairing code, select\nPair device with pairing code\nfrom\n            the\nPair devices over Wi-Fi\npopup. On your device, select\nPair using\n            pairing code\nand take note of the six-digit code provided. Once your device appears on the\nPair devices over Wi-Fi\nwindow, you can select\nPair\nand enter the six-digit\n            code shown on your device.\nFigure 4.\nExample of six-digit code entry.\nAfter your device is paired, you can attempt to deploy your app to your device.\nTo pair a different device or to forget the current device on your workstation, navigate to\nWireless debugging\non your device. Tap your workstation name under\nPaired\n        devices\nand select\nForget\n.\nIf you want to quickly turn on and off wireless debugging, you can utilize the\nQuick settings developer tiles\nfor\nWireless debugging\n, found in\nDeveloper Options\n>\nQuick settings developer\n          tiles\n.\nFigure 5.\nThe\nQuick settings developer tiles\nsetting\n            lets you quickly turn wireless debugging on and off.\nWi-Fi connection using command line\nAlternatively, to connect to your device using command line without Android Studio, follow\n        these steps:\nEnable developer options on your device, as described earlier.\nEnable\nWireless debugging\non your device, as described earlier.\nOn your workstation, open a terminal window and navigate to\nandroid_sdk/platform-tools\n.\nFind your IP address, port number, and pairing code by selecting\nPair device with\n            pairing code\n. Take note of the IP address, port number, and pairing code displayed on\n            the device.\nOn your workstation's terminal, run\nadb pair ipaddr:port\n. Use the IP address\n            and port number from above.\nWhen prompted, enter the pairing code, as shown below.\nFigure 6.\nA message indicates that your device has been successfully\n            paired.\nResolve wireless connection issues\nIf you are having issues connecting to your device wirelessly, try the following\n    troubleshooting steps to resolve the issue.\nCheck whether your workstation and device meet the prerequisites\nCheck that the workstation and device meet the prerequisites listed at the\nbeginning of this section\n.\nCheck for other known issues\nThe following is a list of current known issues with wireless debugging (with adb or Android\n    Studio) and how to resolve them:\nWi-Fi is not connecting\n: Secure Wi-Fi networks, such as corporate Wi-Fi networks,\n        may block p2p connections and not let you connect over Wi-Fi. Try connecting with a cable or\n        another (non-corp) Wi-Fi network. Wireless connection using\nadb connect\nip\n:\nport\nover tcp/ip (following an initial USB connection) is another option,\n        in case resorting to a non-corp network is an option.\nadb\nover Wi-Fi sometimes turns off automatically\n: This can happen if the device\n        either switches Wi-Fi networks or disconnects from the network. To resolve, re-connect\n        to the network.\nDevice not connecting after pairing successfully\n:\nadb\nrelies on mDNS to\n        discover and automatically connect to paired devices. If your network or device\n        configuration does not support mDNS or has disabled it, then you need to manually\n        connect to the device using\nadb connect\nip\n:\nport\n.\nConnect wirelessly with a device after an initial USB connection (only option available on Android 10 and lower)\nNote:\nThis workflow is applicable also to Android 11 (and\n  higher), the caveat being that it also involves an *initial* connection over physical USB.\nNote:\nThe following instructions do not apply to Wear devices\n  running Android 10 (API level 29) or lower. See the guide about\ndebugging a Wear OS app\nfor\nmore information.\nadb\nusually communicates with the device over USB, but you can also use\nadb\nover Wi-Fi. To connect a device running Android 10 (API level 29) or lower,\n  follow these initial steps over USB:\nConnect your Android device and\nadb\nhost computer\nto a common Wi-Fi network.\nNote:\nBeware that not all access points\nare suitable. You might need to use an access point\nwhose firewall is configured properly to support\nadb\n.\nConnect the device to the host computer with a USB cable.\nSet the target device to listen for a TCP/IP connection on port 5555:\nadb tcpip 5555\nDisconnect the USB cable from the target device.\nFind the IP address of the Android device. For example, on a Nexus device, you can find\nthe IP address at\nSettings\n>\nAbout tablet\n(or\nAbout phone\n) >\nStatus\n>\nIP address\n.\nConnect to the device by its IP address:\nadb connect\ndevice_ip_address\n:5555\nConfirm that your host computer is connected to the target device:\n$ adb devices\nList of devices attached\ndevice_ip_address\n:5555 device\nYour device is now connected to\nadb\n.\nIf the\nadb\nconnection to your device is lost:\nMake sure that your host is still connected to the same Wi-Fi network as your Android device.\nReconnect by executing the\nadb connect\nstep again.\nIf that doesn't work, reset your\nadb\nhost:\nadb kill-server\nThen start over from the beginning.\nQuery for devices\nBefore issuing\nadb\ncommands, it is helpful to know what device instances are connected\n  to the\nadb\nserver. Generate a list of attached devices using the\ndevices\ncommand:\nadb devices -l\nIn response,\nadb\nprints this status information for each device:\nSerial number:\nadb\ncreates a string to uniquely identify the device\n      by its port number.\n    Here's an example serial number:\nemulator-5554\nState:\nThe connection state of the device can be one of the following:\noffline\n: The device is not connected to\nadb\nor is not\n        responding.\ndevice\n: The device is connected to the\nadb\nserver. Note that\n        this state does not imply that the Android system is fully booted and operational, because\n        the device connects to\nadb\nwhile the system is still booting. After boot-up, this is the normal operational\n        state of a device.\nno device\n: There is no device connected.\nDescription:\nIf you include the\n-l\noption, the\ndevices\ncommand tells you what the device is. This information is helpful when you have multiple devices\n    connected so that you can tell them apart.\nThe following example shows the\ndevices\ncommand and its output. There are three\n  devices running. The first two lines in the list are emulators, and the third line is a hardware\n  device that is attached to the computer.\n$ adb devices\nList of devices attached\nemulator-5556 device product:sdk_google_phone_x86_64 model:Android_SDK_built_for_x86_64 device:generic_x86_64\nemulator-5554 device product:sdk_google_phone_x86 model:Android_SDK_built_for_x86 device:generic_x86\n0a388e93      device usb:1-1 product:razor model:Nexus_7 device:flo\nEmulator not listed\nThe\nadb devices\ncommand has a corner-case command sequence that causes running\n  emulators to not show up in the\nadb devices\noutput even though\n  the emulators are visible on your desktop. This happens when\nall\nof the following\n  conditions are true:\nThe\nadb\nserver is not running.\nYou use the\nemulator\ncommand with the\n-port\nor\n-ports\noption with an odd-numbered port value between 5554 and 5584.\nThe odd-numbered port you chose is not busy, so the port connection can be made at the\n     specified port number — or, if it is busy, the emulator switches to\n     another port that meets the requirements in 2.\nYou start the\nadb\nserver after you start the emulator.\nOne way to avoid this situation is to let the emulator choose its own ports and to run no more\n    than 16 emulators at once. Another way is to always start the\nadb\nserver before you\n    use the\nemulator\ncommand, as explained in the following examples.\nExample 1:\nIn the following command sequence, the\nadb devices\ncommand starts\n  the\nadb\nserver, but the list of devices does not appear.\nStop the\nadb\nserver and enter the following commands in the order shown. For the AVD\nname, provide a valid AVD name from your system. To get a list of AVD names, type\nemulator -list-avds\n. The\nemulator\ncommand is in the\nandroid_sdk\n/tools\ndirectory.\n$ adb kill-server\n$ emulator -avd Nexus_6_API_25 -port 5555\n$ adb devices\n\nList of devices attached\n* daemon not running. starting it now on port 5037 *\n* daemon started successfully *\nExample 2:\nIn the following command sequence,\nadb devices\ndisplays the\n  list of devices because the\nadb\nserver was started first.\nTo see the emulator in the\nadb devices\noutput, stop the\nadb\nserver, and\n  then start it again after using the\nemulator\ncommand and before using the\nadb devices\ncommand, as follows:\n$ adb kill-server\n$ emulator -avd Nexus_6_API_25 -port 5557\n$ adb start-server\n$ adb devices\n\nList of devices attached\nemulator-5557 device\nFor more information about emulator command-line options,\nsee\nCommand-Line\n  startup options\n.\nSend commands to a specific device\nIf multiple devices are running, you must specify the target device\n  when you issue the\nadb\ncommand. \n  \n  To specify the target, follow these steps:\nUse the\ndevices\ncommand to get the serial number of the target.\nOnce you have the serial number, use the\n-s\noption with the\nadb\ncommands to specify the serial number.\nIf you're going to issue a lot of\nadb\ncommands, you can set the\n$ANDROID_SERIAL\nenvironment variable to contain the serial number\n  instead.\nIf you use both\n-s\nand\n$ANDROID_SERIAL\n,\n-s\noverrides\n$ANDROID_SERIAL\n.\nIn the following example, the list of attached devices is obtained, and then the serial\n  number of one of the devices is used to install the\nhelloWorld.apk\non that device:\n$ adb devices\nList of devices attached\nemulator-5554 device\nemulator-5555 device\n0.0.0.0:6520  device\n\n# To install on emulator-5555\n$ adb -s emulator-5555 install helloWorld.apk\n# To install on 0.0.0.0:6520\n$ adb -s 0.0.0.0:6520 install helloWorld.apk\nNote:\nIf you issue a command without specifying a target device\n    when multiple devices are available,\nadb\ndisplays an error\n    \"adb: more than one device/emulator\".\nIf you have multiple devices available but only one is an emulator,\nuse the\n-e\noption to send commands to the emulator. If there are multiple\ndevices but only one hardware device attached, use the\n-d\noption to send commands to\nthe hardware device.\nInstall an app\nYou can use\nadb\nto install an APK on an emulator or connected device\nwith the\ninstall\ncommand:\nadb install\npath_to_apk\nYou must use the\n-t\noption with the\ninstall\ncommand when you install a test APK. For more information,\n    see\n-t\n.\nTo install multiple APKs use\ninstall-multiple\n. This is useful if you download all\n  the APKs for a specific device for your app from the Play Console and want to install them on an\n  emulator or physical device.\nFor more information about how to create an APK file that you can install on an emulator/device\ninstance, see\nBuild and run your app\n.\nNote:\nIf you are using Android Studio, you do not need to use\nadb\ndirectly to install your app on the emulator or device. Instead, Android Studio\n  handles the packaging and installation of the app for you.\nSet up port forwarding\nUse the\nforward\ncommand to set up arbitrary port forwarding, which\n  forwards requests on a specific host port to a different port on a device.\n  The following example sets up forwarding of host port 6100 to device port 7100:\nadb forward tcp:6100 tcp:7100\nThe following example sets up forwarding of host port 6100 to local:logd:\nadb forward tcp:6100 local:logd\nThis could be useful if you are trying to detemine what is being sent to a given port on the\n  device. All received data will be written to the system-logging daemon and displayed\n  in the device logs.\nCopy files to and from a device\nUse the\npull\nand\npush\ncommands to copy files to\nand from a device. Unlike the\ninstall\ncommand,\nwhich only copies an APK file to a specific location, the\npull\nand\npush\ncommands let you copy arbitrary directories and files to any location in a device.\nTo copy a file or directory and its sub-directories\nfrom\nthe device,\ndo the following:\nadb pull\nremote\nlocal\nTo copy a file or directory and its sub-directories\nto\nthe device,\n  do the following:\nadb push\nlocal\nremote\nReplace\nlocal\nand\nremote\nwith the paths to\nthe target files/directory on your development machine (local) and on the\ndevice (remote). For example:\nadb push myfile.txt /sdcard/myfile.txt\nStop the adb server\nIn some cases, you might need to terminate the\nadb\nserver process and then restart\n  it to resolve the problem. For example, this could be the case if\nadb\ndoes not respond to a command.\nTo stop the\nadb\nserver, use the\nadb kill-server\ncommand.\nYou can then restart the server by issuing any other\nadb\ncommand.\nIssue adb commands\nIssue\nadb\ncommands from a command line on your development machine or from a script using the\n  following:\nadb [-d | -e | -s\nserial_number\n]\ncommand\nIf there's only one emulator running or only one device connected, the\nadb\ncommand is\nsent to that device by default. If multiple emulators are running and/or multiple devices are\nattached, you need to use the\n-d\n,\n-e\n, or\n-s\noption to specify the target device to which the command should be directed.\nYou can see a detailed list of all supported\nadb\ncommands using the following\n  command:\nadb --help\nIssue shell commands\nYou can use the\nshell\ncommand to issue device commands through\nadb\nor to start an\ninteractive shell. To issue a single command, use the\nshell\ncommand like this:\nadb [-d |-e | -s\nserial_number\n] shell\nshell_command\nTo start an interactive shell on a device, use the\nshell\ncommand like this:\nadb [-d | -e | -s\nserial_number\n] shell\nTo exit an interactive shell, press\nControl+D\nor type\nexit\n.\nAndroid provides most of the usual Unix command-line tools. For a list of available tools, use\nthe following command:\nadb shell ls /system/bin\nHelp is available for most of the commands via the\n--help\nargument.\nMany of the shell commands are provided by\ntoybox\n.\nGeneral help applicable to all toybox commands is available via\ntoybox --help\n.\nWith Android Platform Tools 23 and higher,\nadb\nhandles arguments the same way that\n  the\nssh(1)\ncommand does. This change has fixed a lot of problems with\ncommand injection\nand makes it possible to safely execute commands that contain shell\nmetacharacters\n,\n    such as\nadb install Let\\'sGo.apk\n. This change means that the interpretation\n    of any command that contains shell metacharacters has also changed.\nFor example,\nadb shell setprop\nkey\n'\ntwo words\n'\nis now an error,\n    because the quotes are swallowed by the local shell, and the device sees\nadb shell setprop key two words\n. To make the command work, quote twice,\n    once for the local shell and once for the remote shell, as you do with\nssh(1)\n. For example,\nadb shell setprop\nkey\n\"'\ntwo words\n'\"\nworks because the local shell takes the outer level of quoting and the device\n    still sees the inner level of quoting:\nsetprop key 'two words'\n. Escaping is\n    also an option, but quoting twice is usually easier.\nSee also\nLogcat command-line tool\n, which is useful\nfor monitoring the system log.\nCall activity manager\nWithin an\nadb\nshell, you can issue commands with the activity manager (\nam\n) tool to\nperform various system actions, such as start an activity, force-stop a process,\nbroadcast an intent, modify the device screen properties, and more.\nWhile in a shell, the\nam\nsyntax is:\nam\ncommand\nYou can also issue an activity manager command directly from\nadb\nwithout entering a remote shell. For example:\nadb shell am start -a android.intent.action.VIEW\nTable 1.\nAvailable activity manager commands\nCommand\nDescription\nstart [\noptions\n]\nintent\nStart an\nActivity\nspecified by\nintent\n.\nSee the\nSpecification for intent arguments\n.\nOptions are:\n-D\n: Enable debugging.\n-W\n: Wait for launch to complete.\n--start-profiler\nfile\n: Start profiler and send results to\nfile\n.\n-P\nfile\n: Like\n--start-profiler\n,\n        but profiling stops when the app goes idle.\n-R\ncount\n: Repeat the activity launch\ncount\ntimes.  Prior to each repeat,\n        the top activity will be finished.\n-S\n: Force stop the target app before starting the activity.\n--opengl-trace\n: Enable tracing of OpenGL functions.\n--user\nuser_id\n| current\n: Specify which user to run as; if not\n        specified, then run as the current user.\nstartservice [\noptions\n]\nintent\nStart the\nService\nspecified by\nintent\n.\nSee the\nSpecification for intent arguments\n.\nOptions are:\n--user\nuser_id\n| current\n: Specify which user to run as. If not\n        specified, then run as the current user.\nforce-stop\npackage\nForce-stop everything associated with\npackage\n.\nkill  [\noptions\n]\npackage\nKill all processes associated with\npackage\n.  This command kills only\n  processes that are safe to kill and that will not impact the user\n  experience.\nOptions are:\n--user\nuser_id\n| all | current\n: Specify which user's processes to kill.\n      If not specified, then kill all users' processes.\nkill-all\nKill all background processes.\nbroadcast [\noptions\n]\nintent\nIssue a broadcast intent.\nSee the\nSpecification for intent arguments\n.\nOptions are:\n[--user\nuser_id\n| all | current]\n: Specify which user to send to. If not\n        specified, then send to all users.\ninstrument [\noptions\n]\ncomponent\nStart monitoring with an\nInstrumentation\ninstance.\n  Typically the target\ncomponent\nis the form\ntest_package\n/\nrunner_class\n.\nOptions are:\n-r\n: Print raw results (otherwise decode\nreport_key_streamresult\n).  Use with\n[-e perf true]\nto generate raw output for performance measurements.\n-e\nname\nvalue\n: Set argument\nname\nto\nvalue\n.\n        For test runners a common form is\n-e\ntestrunner_flag\nvalue\n[,\nvalue\n...]\n.\n-p\nfile\n: Write profiling data to\nfile\n.\n-w\n: Wait for instrumentation to finish before returning. Required for\n        test runners.\n--no-window-animation\n: Turn off window animations while running.\n--user\nuser_id\n| current\n: Specify which user instrumentation runs in.\n        If not specified, run in the current user.\nprofile start\nprocess\nfile\nStart profiler on\nprocess\n, write results to\nfile\n.\nprofile stop\nprocess\nStop profiler on\nprocess\n.\ndumpheap [\noptions\n]\nprocess\nfile\nDump the heap of\nprocess\n, write to\nfile\n.\nOptions are:\n--user [\nuser_id\n| current]\n: When supplying a process name,\n        specify the user of the process to dump. If not specified, the current user is used.\n-b [| png | jpg | webp]\n: Dump bitmaps from graphics memory (API level 35 and above).\n        Optionally specify the format to dump in (PNG by default).\n-n\n: Dump native heap instead of managed heap.\ndumpbitmaps [\noptions\n] [-p\nprocess\n]\nDump bitmap information from\nprocess\n(API level 36 and above).\nOptions are:\n-d|--dump [\nformat\n]\n: dump bitmap contents in the\n    specified\nformat\n, which can be one of\npng\n,\njpg\n, or\nwebp\n, default to\npng\nif none is specified. A zip file\ndumpbitmaps-<time>.zip\nwill be created with the bitmaps.\n-p\nprocess\n: dump bitmaps from\nprocess\n, multiple\n-p\nprocess\ncan be specified.\nIf no\nprocess\nis specified, bitmaps from all\nprocesses will be dumped.\nset-debug-app [\noptions\n]\npackage\nSet app\npackage\nto debug.\nOptions are:\n-w\n: Wait for debugger when app starts.\n--persistent\n: Retain this value.\nclear-debug-app\nClear the package previous set for debugging with\nset-debug-app\n.\nmonitor [\noptions\n]\nStart monitoring for crashes or ANRs.\nOptions are:\n--gdb\n: Start\ngdbserv\non the given port at crash/ANR.\nscreen-compat {on | off}\npackage\nControl\nscreen\ncompatibility\nmode of\npackage\n.\ndisplay-size [reset |\nwidth\nx\nheight\n]\nOverride device display size.\nThis command is helpful for testing your app across different screen sizes by mimicking a small\nscreen resolution using a device with a large screen, and vice versa.\nExample:\nam display-size 1280x800\ndisplay-density\ndpi\nOverride device display density.\nThis command is helpful for testing your app across different screen densities by mimicking a high-density\nscreen environment using a low-density screen, and vice versa.\nExample:\nam display-density 480\nto-uri\nintent\nPrint the given intent specification as a URI.\nSee the\nSpecification for intent arguments\n.\nto-intent-uri\nintent\nPrint the given intent specification as an\nintent:\nURI.\nSee the\nSpecification for intent arguments\n.\nSpecification for intent arguments\nFor activity manager commands that take an\nintent\nargument, you can\nspecify the intent with the following options:\nShow all\n-a\naction\nSpecify the intent action, such as\nandroid.intent.action.VIEW\n.\n      You can declare this only once.\n-d\ndata_uri\nSpecify the intent data URI, such as\ncontent://contacts/people/1\n.\n      You can declare this only once.\n-t\nmime_type\nSpecify the intent MIME type, such as\nimage/png\n.\n      You can declare this only once.\n-c\ncategory\nSpecify an intent category, such as\nandroid.intent.category.APP_CONTACTS\n.\n-n\ncomponent\nSpecify the component name with package name prefix to create an explicit intent, such\n        as\ncom.example.app/.ExampleActivity\n.\n-f\nflags\nAdd flags to the intent, as supported by\nsetFlags()\n.\n--esn\nextra_key\nAdd a null extra. This option is not supported for URI intents.\n-e | --es\nextra_key\nextra_string_value\nAdd string data as a key-value pair.\n--ez\nextra_key\nextra_boolean_value\nAdd boolean data as a key-value pair.\n--ei\nextra_key\nextra_int_value\nAdd integer data as a key-value pair.\n--el\nextra_key\nextra_long_value\nAdd long data as a key-value pair.\n--ef\nextra_key\nextra_float_value\nAdd float data as a key-value pair.\n--eu\nextra_key\nextra_uri_value\nAdd URI data as a key-value pair.\n--ecn\nextra_key\nextra_component_name_value\nAdd a component name, which is converted and passed as\n      a\nComponentName\nobject.\n--eia\nextra_key\nextra_int_value\n[,\nextra_int_value\n...]\nAdd an array of integers.\n--ela\nextra_key\nextra_long_value\n[,\nextra_long_value\n...]\nAdd an array of longs.\n--efa\nextra_key\nextra_float_value\n[,\nextra_float_value\n...]\nAdd an array of floats.\n--grant-read-uri-permission\nInclude the flag\nFLAG_GRANT_READ_URI_PERMISSION\n.\n--grant-write-uri-permission\nInclude the flag\nFLAG_GRANT_WRITE_URI_PERMISSION\n.\n--debug-log-resolution\nInclude the flag\nFLAG_DEBUG_LOG_RESOLUTION\n.\n--exclude-stopped-packages\nInclude the flag\nFLAG_EXCLUDE_STOPPED_PACKAGES\n.\n--include-stopped-packages\nInclude the flag\nFLAG_INCLUDE_STOPPED_PACKAGES\n.\n--activity-brought-to-front\nInclude the flag\nFLAG_ACTIVITY_BROUGHT_TO_FRONT\n.\n--activity-clear-top\nInclude the flag\nFLAG_ACTIVITY_CLEAR_TOP\n.\n--activity-clear-when-task-reset\nInclude the flag\nFLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET\n.\n--activity-exclude-from-recents\nInclude the flag\nFLAG_ACTIVITY_EXCLUDE_FROM_RECENTS\n.\n--activity-launched-from-history\nInclude the flag\nFLAG_ACTIVITY_LAUNCHED_FROM_HISTORY\n.\n--activity-multiple-task\nInclude the flag\nFLAG_ACTIVITY_MULTIPLE_TASK\n.\n--activity-no-animation\nInclude the flag\nFLAG_ACTIVITY_NO_ANIMATION\n.\n--activity-no-history\nInclude the flag\nFLAG_ACTIVITY_NO_HISTORY\n.\n--activity-no-user-action\nInclude the flag\nFLAG_ACTIVITY_NO_USER_ACTION\n.\n--activity-previous-is-top\nInclude the flag\nFLAG_ACTIVITY_PREVIOUS_IS_TOP\n.\n--activity-reorder-to-front\nInclude the flag\nFLAG_ACTIVITY_REORDER_TO_FRONT\n.\n--activity-reset-task-if-needed\nInclude the flag\nFLAG_ACTIVITY_RESET_TASK_IF_NEEDED\n.\n--activity-single-top\nInclude the flag\nFLAG_ACTIVITY_SINGLE_TOP\n.\n--activity-clear-task\nInclude the flag\nFLAG_ACTIVITY_CLEAR_TASK\n.\n--activity-task-on-home\nInclude the flag\nFLAG_ACTIVITY_TASK_ON_HOME\n.\n--receiver-registered-only\nInclude the flag\nFLAG_RECEIVER_REGISTERED_ONLY\n.\n--receiver-replace-pending\nInclude the flag\nFLAG_RECEIVER_REPLACE_PENDING\n.\n--selector\nRequires the use of\n-d\nand\n-t\noptions to set the intent data and\n        type.\nURI\ncomponent\npackage\nYou can directly specify a URI, package name, and component name when not qualified\n      by one of the preceding options. When an argument is unqualified, the tool assumes the argument\n      is a URI if it contains a \":\" (colon). The tools assumes the argument is a component name if\n      it contains a \"/\" (forward-slash); otherwise it assumes the argument is a package name.\nCall package manager (\npm\n)\nWithin an\nadb\nshell, you can issue commands with the package manager (\npm\n) tool to\nperform actions and queries on app packages installed on the device.\nWhile in a shell, the\npm\nsyntax is:\npm\ncommand\nYou can also issue a package manager command directly from\nadb\nwithout entering a remote shell. For example:\nadb shell pm uninstall\ncom.example.MyApp\nTable 2.\nAvailable package manager commands\nCommand\nDescription\nlist packages [\noptions\n]\nfilter\nPrint all packages, optionally only\n  those whose package name contains the text in\nfilter\n.\nOptions:\n-f\n: See associated file.\n-d\n: Filter to only show disabled packages.\n-e\n: Filter to only show enabled packages.\n-s\n: Filter to only show system packages.\n-3\n: Filter to only show third-party packages.\n-i\n: See the installer for the packages.\n-u\n: Include uninstalled packages.\n--user\nuser_id\n: The user space to query.\nlist permission-groups\nPrint all known permission groups.\nlist permissions [\noptions\n]\ngroup\nPrint all known permissions, optionally only\n  those in\ngroup\n.\nOptions:\n-g\n: Organize by group.\n-f\n: Print all information.\n-s\n: Short summary.\n-d\n: Only list dangerous permissions.\n-u\n: List only the permissions users will see.\nlist instrumentation [\noptions\n]\nList all test packages.\nOptions:\n-f\n: List the APK file for the test package.\ntarget_package\n: List test packages for only this app.\nlist features\nPrint all features of the system.\nlist libraries\nPrint all the libraries supported by the current device.\nlist users\nPrint all users on the system.\npath\npackage\nPrint the path to the APK of the given\npackage\n.\ninstall [\noptions\n]\npath\nInstall a package, specified by\npath\n, to the system.\nOptions:\n-r\n: Reinstall an existing app, keeping its data.\n-t\n: Allow test APKs to be installed. Gradle generates a test APK when\n      you have only run or debugged your app or have used the Android Studio\nBuild > Build\n      APK\ncommand. If the APK is built using a developer preview SDK, you must include the\n-t\noption\nwith the\ninstall\ncommand if you are installing a test APK.\n-i\ninstaller_package_name\n: Specify the installer package name.\n--user\nuser_id\n: Specify the user to install the package for. By\n      default, the package is installed for all users existing on the device.\n--install-location\nlocation\n: Set the install location\n      using one of the following values:\n0\n: Use the default install location.\n1\n: Install on internal device storage.\n2\n: Install on external media.\n-f\n: Install package on the internal system memory.\n-d\n: Allow version code downgrade.\n-g\n: Grant all permissions listed in the app manifest.\n--fastdeploy\n: Quickly update an installed package by only updating the parts of\n      the APK that changed.\n--incremental\n: Installs enough of the APK to launch the app\n      while streaming the remaining data in the background. To use this feature, you must sign the\n      APK, create an\nAPK Signature Scheme v4 file\n,\n      and place this file in the same directory as the APK. This feature is only supported on\n      certain devices. This option forces\nadb\nto use the feature or fail if it is not\n      supported, with verbose information on why it failed. Append the\n--wait\noption to\n      wait until the APK is fully installed before granting access to the APK.\n--no-incremental\nprevents\nadb\nfrom using this feature.\nuninstall [\noptions\n]\npackage\nRemoves a package from the system.\nOptions:\n-k\n: Keep the data and cache directories after package removal.\n--user\nuser_id\n: Specifies the user for whom the package is removed.\n      By default, the package is removed for all users on the device.\n--versionCode\nversion_code\n: Only uninstalls if the app has the given\n      version code.\nclear\npackage\nDelete all data associated with a package.\nenable\npackage_or_component\nEnable the given package or component (written as \"package/class\").\ndisable\npackage_or_component\nDisable the given package or component (written as \"package/class\").\ndisable-user [\noptions\n]\npackage_or_component\nOptions:\n--user\nuser_id\n: The user to disable.\ngrant\npackage_name\npermission\nGrant a permission to an app. On devices running Android 6.0 (API level 23)\nand higher, the permission can be any permission declared in the app manifest. On devices\nrunning Android 5.1 (API level 22) and lower, must be an optional permission defined by the\napp.\nrevoke\npackage_name\npermission\nRevoke a permission from an app. On devices running Android 6.0 (API level\n23) and higher, the permission can be any permission declared in the app manifest. On devices\nrunning Android 5.1 (API level 22) and lower, must be an optional permission defined by the\napp.\nset-install-location\nlocation\nChange the default install location. Location values:\n0\n: Auto: Let system decide the best location.\n1\n: Internal: Install on internal device storage.\n2\n: External: Install on external media.\nNote:\nThis is only intended for debugging. Using this can cause\n  apps to break and other undesireable behavior.\nget-install-location\nReturns the current install location. Return values:\n0 [auto]\n: Let system decide the best location\n1 [internal]\n: Install on internal device storage\n2 [external]\n: Install on external media\nset-permission-enforced\npermission\n[true | false]\nSpecify whether the given permission should be enforced.\ntrim-caches\ndesired_free_space\nTrim cache files to reach the given free space.\ncreate-user\nuser_name\nCreate a new user with the given\nuser_name\n,\n  printing the new user identifier of the user.\nremove-user\nuser_id\nRemove the user with the given\nuser_id\n,\n  deleting all data associated with that user\nget-max-users\nPrint the maximum number of users supported by the device.\nget-app-links [\noptions\n] [\npackage\n]\nPrint the domain verification state for the given\npackage\n, or for all\n    packages if none is specified. State codes are defined as follows:\nnone\n: nothing has been recorded for this domain\nverified\n: the domain has been successfully verified\napproved\n: force-approved, usually through shell\ndenied\n: force-denied, usually through shell\nmigrated\n: preserved verification from a legacy response\nrestored\n: preserved verification from a user data restore\nlegacy_failure\n: rejected by a legacy verifier, unknown reason\nsystem_configured\n: automatically approved by the device config\n>= 1024\n: custom error code, which is specific to the device verifier\nOptions are:\n--user\nuser_id\n: include user selections. Include all domains, \n          not just autoVerify ones.\nreset-app-links [\noptions\n] [\npackage\n]\nReset domain verification state for the given package, or for all\n    packages if none is specified.\npackage\n: the package to reset, or \"all\" to reset all packages\nOptions are:\n--user\nuser_id\n: include user selections. Include all domains, \n          not just autoVerify ones.\nverify-app-links [\n--re-verify\n] [\npackage\n]\nBroadcast a verification request for the given\npackage\n, or for all\n    packages if none is specified. Only sends if the package has previously\n    not recorded a response.\n--re-verify\n: send even if the package has recorded a response\nset-app-links [--package\npackage\n]\nstate\ndomains\nManually set the state of a domain for a package. The domain must be\n    declared by the package as autoVerify for this to work. This command\n    will not report a failure for domains that could not be applied.\n--package\npackage\n: the package to set, or \"all\" to set all packages\nstate\n: the code to set the domains to. Valid values are:\nSTATE_NO_RESPONSE (0)\n: reset as if no response was ever recorded.\nSTATE_SUCCESS (1)\n: treat domain as successfully verified by domain\n                verification agent. Note that the domain verification agent can\n                override this.\nSTATE_APPROVED (2)\n: treat domain as always approved, preventing the\n                 domain verification agent from changing it.\nSTATE_DENIED (3)\n: treat domain as always denied, preventing the domain\n                verification agent from changing it.\ndomains\n: space-separated list of domains to change, or \"all\" to\n            change every domain.\nset-app-links-user-selection --user\nuser_id\n[--package\npackage\n]\nenabled\ndomains\nManually set the state of a host user selection for a package. The domain\n    must be declared by the package for this to work. This command will not\n    report a failure for domains that could not be applied.\n--user\nuser_id\n: the user to change selections for\n--package\npackage\n: the package to set\nenabled\n: whether to approve the domain\ndomains\n: space-separated list of domains to change, or \"all\" to\n          change every domain\nset-app-links-allowed --user\nuser_id\n[--package\npackage\n]\nallowed\nToggle the auto-verified link-handling setting for a package.\n--user\nuser_id\n: the user to change selections for\n--package\npackage\n: the package to set, or \"all\" to set all\n          packages; packages will be reset if no package is specified\nallowed\n: true to allow the package to open auto-verified links,\n          false to disable\nget-app-link-owners --user\nuser_id\n[--package\npackage\n]\ndomains\nPrint the owners for a specific domain for a given user in low- to high-priority order.\n--user\nuser_id\n: the user to query for\n--package\npackage\n: optionally also print for all web domains\n          declared by a package, or \"all\" to print all packages\ndomains\n: space-separated list of domains to query for\nCall device policy manager (\ndpm\n)\nTo help you develop and test your device management apps, issue\n  commands to the device policy manager (\ndpm\n) tool. Use the tool to control the active\n  admin app or change a policy's status data on the device.\nWhile in a shell, the\ndpm\nsyntax is:\ndpm\ncommand\nYou can also issue a device policy manager command directly from\nadb\nwithout entering a remote shell:\nadb shell dpm\ncommand\nTable 3.\nAvailable device policy manager commands\nCommand\nDescription\nset-active-admin [\noptions\n]\ncomponent\nSets\ncomponent\nas active admin.\nOptions are:\n--user\nuser_id\n: Specify the target user. You can also pass\n--user current\nto select the current user.\nset-profile-owner [\noptions\n]\ncomponent\nSet\ncomponent\nas active admin and its package as profile owner for an existing user.\nOptions are:\n--user\nuser_id\n: Specify the target user. You can\n    also pass\n--user current\nto select the current user.\n--name\nname\n: Specify the human-readable organization name.\nset-device-owner [\noptions\n]\ncomponent\nSet\ncomponent\nas active admin and its package as device owner.\nOptions are:\n--user\nuser_id\n: Specify the target user. You can also pass\n--user current\nto select the current user.\n--name\nname\n: Specify the human-readable organization name.\nremove-active-admin [\noptions\n]\ncomponent\nDisable an active admin. The app must declare\nandroid:testOnly\nin the manifest. This command also removes device and profile owners.\nOptions are:\n--user\nuser_id\n: Specify the target user. You can also pass\n--user current\nto select the current user.\nclear-freeze-period-record\nClear the device's record of previously set freeze periods for system OTA updates. This is useful\nto avoid the device scheduling restrictions when developing apps that manage freeze periods. See\nManage system updates\n.\nSupported on devices running Android 9.0 (API level 28) and higher.\nforce-network-logs\nForce the system to make any existing network logs ready for retrieval by a DPC. If there are\nconnection or DNS logs available, the DPC receives the\nonNetworkLogsAvailable()\ncallback. See\nNetwork activity logging\n.\nThis command is rate-limited. Supported on devices running Android 9.0 (API level 28) and higher.\nforce-security-logs\nForce the system to make any existing security logs available to the DPC. If there are logs\navailable, the DPC receives the\nonSecurityLogsAvailable()\ncallback. See\nLog enterprise device\nactivity\n.\nThis command is rate-limited. Supported on devices running Android 9.0 (API level 28) and higher.\nTake a screenshot\nThe\nscreencap\ncommand is a shell utility for taking a screenshot of a device\n  display.\nWhile in a shell, the\nscreencap\nsyntax is:\nscreencap\nfilename\nTo use\nscreencap\nfrom the command line, enter the following:\nadb shell screencap /sdcard/screen.png\nHere's an example screenshot session, using the\nadb\nshell to capture the screenshot\n  and the\npull\ncommand to download the file from the device:\n$ adb shell\nshell@ $ screencap /sdcard/screen.png\nshell@ $ exit\n$ adb pull /sdcard/screen.png\nAlternatively, if you omit the filename,\nscreencap\nwrites the image to standard output. When combined with the\n-p\noption to specify PNG format, you can stream the device screenshot directly to a file on your local machine.\nHere's an example of capturing a screenshot and saving it locally in a single command:\n# use 'exec-out' instead of 'shell' to get raw data\n$ adb exec-out screencap -p > screen.png\nRecord a video\nThe\nscreenrecord\ncommand is a shell utility for recording the display of devices\n  running Android 4.4 (API level 19) and higher. The utility records screen activity to an MPEG-4\n  file. You can use this file to create promotional or training videos or for debugging and testing.\nIn a shell, use the following syntax:\nscreenrecord [\noptions\n]\nfilename\nTo use\nscreenrecord\nfrom the command line, enter the following:\nadb shell screenrecord /sdcard/demo.mp4\nStop the screen recording by pressing Control+C. Otherwise, the recording\n  stops automatically at three minutes or the time limit set by\n--time-limit\n.\nTo begin recording your device screen, run the\nscreenrecord\ncommand to record\nthe video. Then, run the\npull\ncommand to download the video from the device to the host\ncomputer. Here's an example recording session:\n$ adb shell\nshell@ $ screenrecord --verbose /sdcard/demo.mp4\n(press Control + C to stop)\nshell@ $ exit\n$ adb pull /sdcard/demo.mp4\nThe\nscreenrecord\nutility can record at any supported resolution and bit rate you\n  request, while retaining the aspect ratio of the device display. The utility records at the native\n  display resolution and orientation by default, with a maximum length of three minutes.\nLimitations of the\nscreenrecord\nutility:\nAudio is not recorded with the video file.\nVideo recording is not available for devices running Wear OS.\nSome devices might not be able to record at their native display resolution.\n    If you encounter problems with screen recording, try using a lower screen resolution.\nRotation of the screen during recording is not supported. If the screen does rotate during\n    recording, some of the screen is cut off in the recording.\nTable 4.\nscreenrecord\noptions\nOptions\nDescription\n--help\nDisplay command syntax and options\n--size\nwidth\nx\nheight\nSet the video size:\n1280x720\n. The default value is the device's native\n      display resolution (if supported), 1280x720 if not. For best results, use a size supported\n      by your device's Advanced Video Coding (AVC) encoder.\n--bit-rate\nrate\nSet the video bit rate for the video, in megabits per second. The default value is 20Mbps.\n      You can increase the bit rate to improve video quality, but doing so results in larger movie\n      files. The following example sets the recording bit rate to 6Mbps:\nscreenrecord --bit-rate 6000000 /sdcard/demo.mp4\n--time-limit\ntime\nSet the maximum recording time, in seconds. The default and maximum value is 180\n      (3 minutes).\n--rotate\nRotate the output 90 degrees. This feature is experimental.\n--verbose\nDisplay log information on the command-line screen. If you do not set this option,\n      the utility does not display any information while running.\nRead ART profiles for apps\nStarting in Android 7.0 (API level 24), the Android Runtime (ART) collects execution profiles for\n   installed apps, which are used to optimize app performance. Examine the collected profiles to\n   understand which methods are executed frequently and which classes are used during app startup.\nNote:\nIt is only possible to retrieve the execution profile\n  filename if you have root access to the file system, for example, on an emulator.\nTo produce a text form of the profile information, use the following command:\nadb shell cmd package dump-profiles\npackage\nTo retrieve the file produced, use:\nadb pull /data/misc/profman/\npackage\n.prof.txt\nReset test devices\nIf you test your app across multiple test devices, it may be useful to reset your device between\n  tests, for example, to remove user data and reset the test environment. You can perform a factory\n  reset of a test device running Android 10 (API level 29) or higher using the\ntestharness\nadb\nshell command, as shown:\nadb shell cmd testharness enable\nWhen restoring the device using\ntestharness\n, the device automatically backs up the RSA\n  key that allows debugging through the current workstation in a persistent location. That is, after\n  the device is reset, the workstation can continue to debug and issue\nadb\ncommands to\n  the device without manually registering a new key.\nAdditionally, to help make it easier and more secure to keep testing your app, using the\ntestharness\nto restore a device also changes the following device settings:\nThe device sets up certain system settings so that initial device setup wizards do not appear.\n    That is, the device enters a state from which you can quickly install, debug, and test your app.\nSettings:\nDisables lock screen.\nDisables emergency alerts.\nDisables auto-sync for accounts.\nDisables automatic system updates.\nOther:\nDisables preinstalled security apps.\nIf your app needs to detect and adapt to the default settings of the\ntestharness\ncommand, use the\nActivityManager.isRunningInUserTestHarness()\n.\nsqlite\nsqlite3\nstarts the\nsqlite\ncommand-line program for examining SQLite databases.\nIt includes commands such as\n.dump\nto print the contents of a table and\n.schema\nto print the\nSQL CREATE\nstatement for an existing table.\nYou can also execute SQLite commands from the command line, as shown:\n$ adb -s emulator-5554 shell\n$ sqlite3 /data/data/com.example.app/databases/rssitems.db\nSQLite version 3.3.12\nEnter \".help\" for instructions\nNote:\nIt is only possible to access a SQLite database\n  if you have root access to the file system, for example, on an emulator.\nFor more information, see the\nsqlite3\ncommand line documentation\n.\nadb USB backends\nThe adb server can interact with the USB stack through two backends. It can either use the native\nbackend of the OS (Windows, Linux, or macOS) or it can use the\nlibusb\nbackend.\nSome features, such as\nattach\n,\ndetach\n, and USB speed detection, are\nonly available when using\nlibusb\nbackend.\nYou can choose a backend by using the\nADB_LIBUSB\nenvironment variable.\nIf it isn't set, adb uses its default backend. The default behavior varies among OS. Starting\nwith\nADB v34\n, the\nliubusb\nbackend is used by default on all OS except Windows, where the native backend is\nused by default. If\nADB_LIBUSB\nis\nset, it determines whether the native backend or\nlibusb\nis used. See the\nadb manual page\nfor more information about adb environment variables.\nExperimental:\nSupport for using the\nlibusb\nbackend with Windows is experimental. As of\n  ADB v34, only the macOS and Linux platforms have been tested with the\nlibusb\nlibrary.\nadb mDNS backends\nADB can use the multicast DNS protocol to automatically connect the server and devices.\nThe ADB server ships with two backends, Bonjour (Apple's mdnsResponder) and Openscreen.\nThe Bonjour backend needs a daemon to be running on the host machine.\nOn macOS Apple's built-in daemon is always running, but on Windows and Linux, the user must make sure the\nmdnsd\ndaemon is up and running.\nIf the command\nadb mdns check\nreturns an error, it is likely that ADB is using the Bonjour backend but there is no Bonjour daemon running.\nThe Openscreen backend does not need a daemon to be running on the machine. Support for the Openscreen backend on macOS starts at ADB v35. Windows and Linux are supported as of ADB v34.\nBy default ADB uses the Bonjour backend. This behavior can be changed using the environment variable\nADB_MDNS_OPENSCREEN\n(set to\n1\nor\n0\n).\nSee the\nADB manual page\nfor further details.\nadb Burst Mode (starting with ADB 36.0.0)\nBurst Mode is an experimental feature that lets ADB to keep on sending\n  packets to a device even before the device has responded to the previous packet. This greatly\n  increases the throughput of ADB when transferring large files and also reduces latency while\n  debugging.\nBurst Mode is disabled by default. To enable the feature, do one of the following:\nSet the environment variable\nADB_DELAYED_ACK\nto\n1\n.\nIn Android Studio, go to the debugger settings at\nFile\n(or\nAndroid Studio\non macOS)\n> Settings > Build, Execution, Deployment > Debugger\nand set\nADB Server Burst Mode\nto\nEnabled\n.\nContent and code samples on this page are subject to the licenses described in the\nContent License\n. Java and OpenJDK are trademarks or registered trademarks of Oracle and/or its affiliates.\nLast updated 2025-09-29 UTC.",
    "source": "android_official_docs"
  },
  {
    "url": "https://developer.android.com/training/testing/ui-automator",
    "title": "\n      Write automated tests with UI Automator\n\n\n      \n      Stay organized with collections\n    \n\n      \n      Save and categorize content based on your preferences.\n    \n\n",
    "content": "Write automated tests with UI Automator  |  Test your app on Android  |  Android Developers\nSkip to main content\n/\nEnglish\nDeutsch\nEspañol – América Latina\nFrançais\nIndonesia\nItaliano\nPolski\nPortuguês – Brasil\nTiếng Việt\nTürkçe\nРусский\nעברית\nالعربيّة\nفارسی\nहिंदी\nবাংলা\nภาษาไทย\n中文 – 简体\n中文 – 繁體\n日本語\n한국어\nAndroid Studio\nSign in\nTest your app on Android\nAndroid Developers\nDevelop\nTest your app on Android\nWrite automated tests with UI Automator\nStay organized with collections\nSave and categorize content based on your preferences.\nThe UI Automator testing framework provides a set of APIs to build UI tests that\ninteract with user apps and system apps.\nNote:\nThis documentation covers the modern approach to writing UI Automator\ntests, introduced with\nUI Automator 2.4\n. This approach makes your tests\nmore concise, readable, and robust. The API is under development, and we\nstrongly recommend using it for any new development with UI Automator. The\nlegacy API guidance\nis also available.\nIntroduction to modern UI Automator testing\nUI Automator 2.4 introduces a streamlined, Kotlin-friendly Domain Specific\nLanguage (DSL) that simplifies writing UI tests for Android. This new API surface\nfocuses on predicate-based element finding and explicit control over app states.\nUse it to create more maintainable and reliable automated tests.\nUI Automator lets you test an app from outside of the app's process. This\nlets you test release versions with minification applied. UI Automator also\nhelps when writing macrobenchmark tests.\nKey features of the modern approach include:\nA dedicated\nuiAutomator\ntest scope for cleaner and more expressive test\ncode.\nMethods like\nonElement\n,\nonElements\n, and\nonElementOrNull\nfor finding UI\nelements with clear predicates.\nBuilt-in waiting mechanism for conditional elements\nonElement*(timeoutMs:\nLong = 10000)\nExplicit app state management such as\nwaitForStable\nand\nwaitForAppToBeVisible\n.\nDirect interaction with accessibility window nodes for multi-window testing\nscenarios.\nBuilt-in screenshot capabilities and a\nResultsReporter\nfor visual testing\nand debugging.\nSet up your project\nTo begin using the modern UI Automator APIs, update your project's\nbuild.gradle.kts\nfile to include the\nlatest dependency\n:\nKotlin\ndependencies {\n  ...\n  androidTestImplementation(\"androidx.test.uiautomator:uiautomator:2.4.0-alpha05\")\n}\nGroovy\ndependencies\n{\n...\nandroidTestImplementation\n\"androidx.test.uiautomator:uiautomator:2.4.0-alpha05\"\n}\nCore API concepts\nThe following sections describe core concepts of the modern UI Automator API.\nThe uiAutomator test scope\nAccess all new UI Automator APIs within the\nuiAutomator { ... }\nblock. This function creates a\nUiAutomatorTestScope\nthat provides a concise\nand type-safe environment for your test operations.\nuiAutomator\n{\n// All your UI Automator actions go here\nstartApp\n(\n\"com.example.targetapp\"\n)\nonElement\n{\ntextAsString\n()\n==\n\"Hello, World!\"\n}.\nclick\n()\n}\nFind UI elements\nUse UI Automator APIs with predicates to locate UI elements. These predicates\nlet you define conditions for properties such as text, selected or focused\nstate, and content description.\nonElement { predicate }\n: Returns the first UI element that matches the\npredicate within a default timeout. The function throws an exception if it\ndoesn't locate a matching element.\n// Find a button with the text \"Submit\" and click it\nonElement\n{\ntextAsString\n()\n==\n\"Submit\"\n}.\nclick\n()\n// Find a UI element by its resource ID\nonElement\n{\nid\n==\n\"my_button_id\"\n}.\nclick\n()\n// Allow a permission request\nwatchFor\n(\nPermissionDialog\n)\n{\nclickAllow\n()\n}\nonElementOrNull { predicate }\n: Similar to\nonElement\n, but returns\nnull\nif the function finds no matching element within the timeout. It\ndoesn't throw an exception. Use this method for optional elements.\nval\noptionalButton\n=\nonElementOrNull\n{\ntextAsString\n()\n==\n\"Skip\"\n}\noptionalButton\n?.\nclick\n()\n// Click only if the button exists\nonElements { predicate }\n: Waits until at least one UI element matches\nthe given predicate, then returns a list of all matching UI elements.\n// Get all items in a list Ui element\nval\nlistItems\n=\nonElements\n{\nclassName\n==\n\"android.widget.TextView\"\n&&\nisClickable\n}\nlistItems\n.\nforEach\n{\nit\n.\nclick\n()\n}\nHere are some tips for using\nonElement\ncalls:\nChain\nonElement\ncalls for nested elements: You can chain\nonElement\ncalls to find elements within other elements, following a parent-child\nhierarchy.\n// Find a parent Ui element with ID \"first\", then its child with ID \"second\",\n// then its grandchild with ID \"third\", and click it.\nonElement\n{\nid\n==\n\"first\"\n}\n.\nonElement\n{\nid\n==\n\"second\"\n}\n.\nonElement\n{\nid\n==\n\"third\"\n}\n.\nclick\n()\nSpecify a timeout for\nonElement*\nfunctions by passing a value representing\nmilliseconds.\n// Find a Ui element with a zero timeout (instant check)\nonElement\n(\n0\n)\n{\nid\n==\n\"something\"\n}.\nclick\n()\n// Find a Ui element with a custom timeout of 10 seconds\nonElement\n(\n10\n_000\n)\n{\ntextAsString\n()\n==\n\"Long loading text\"\n}.\nclick\n()\nInteract with UI elements\nInteract with UI elements by simulating clicks or setting text in\neditable fields.\n// Click a Ui element\nonElement\n{\ntextAsString\n()\n==\n\"Tap Me\"\n}.\nclick\n()\n// Set text in an editable field\nonElement\n{\nclassName\n==\n\"android.widget.EditText\"\n}.\nsetText\n(\n\"My input text\"\n)\n// Perform a long click\nonElement\n{\ncontentDescription\n==\n\"Context Menu\"\n}.\nlongClick\n()\nHandle app states and watchers\nManage the lifecycle of your app and handle unexpected UI elements that might\nappear during your tests.\nApp lifecycle management\nThe APIs provide ways to control the state of the app under test:\n// Start a specific app by package name. Used for benchmarking and other\n// self-instrumenting tests.\nstartApp\n(\n\"com.example.targetapp\"\n)\n// Start a specific activity within the target app\nstartActivity\n(\nSomeActivity\n::\nclass\n.\njava\n)\n// Start an intent\nstartIntent\n(\nmyIntent\n)\n// Clear the app's data (resets it to a fresh state)\nclearAppData\n(\n\"com.example.targetapp\"\n)\nHandle unexpected UI\nThe\nwatchFor\nAPI lets you define handlers for unexpected UI elements,\nsuch as permission dialogs, that might appear during your test flow. This\nuses the internal watcher mechanism but offers more flexibility.\nimport\nandroidx.test.uiautomator.PermissionDialog\n@Test\nfun\nmyTestWithPermissionHandling\n()\n=\nuiAutomator\n{\nstartActivity\n(\nMainActivity\n::\nclass\n.\njava\n)\n// Register a watcher to click \"Allow\" if a permission dialog appears\nwatchFor\n(\nPermissionDialog\n)\n{\nclickAllow\n()\n}\n// Your test steps that might trigger a permission dialog\nonElement\n{\ntextAsString\n()\n==\n\"Request Permissions\"\n}.\nclick\n()\n// Example: You can register a different watcher later if needed\nclearAppData\n(\n\"com.example.targetapp\"\n)\n// Now deny permissions\nstartApp\n(\n\"com.example.targetapp\"\n)\nwatchFor\n(\nPermissionDialog\n)\n{\nclickDeny\n()\n}\nonElement\n{\ntextAsString\n()\n==\n\"Request Permissions\"\n}.\nclick\n()\n}\nPermissionDialog\nis an example of a\nScopedWatcher<T>\n, where\nT\nis the\nobject passed as a scope to the block in\nwatchFor\n. You can create custom\nwatchers based on this pattern.\nWait for app visibility and stability\nSometimes tests need to wait for elements to become visible or stable.\nUI Automator offers several APIs to help with this.\nThe\nwaitForAppToBeVisible(\"com.example.targetapp\")\nwaits for a UI element with\nthe given package name to appear on the screen within a customizable timeout.\n// Wait for the app to be visible after launching it\nstartApp\n(\n\"com.example.targetapp\"\n)\nwaitForAppToBeVisible\n(\n\"com.example.targetapp\"\n)\nUse the\nwaitForStable()\nAPI to verify that the app's UI is considered stable\nbefore interacting with it.\n// Wait for the entire active window to become stable\nactiveWindow\n().\nwaitForStable\n()\n// Wait for a specific Ui element to become stable (e.g., after a loading animation)\nonElement\n{\nid\n==\n\"my_loading_indicator\"\n}.\nwaitForStable\n()\nNote:\nIn most cases,\nwaitForStable()\nisn't strictly necessary when using\nonElement { ... }\nbecause\nonElement\nalready includes a timeout. Use\nwaitForStable()\nprimarily in combination with\nonElements { ... }\nto verify\nthat all UI elements are visible, when you know that the UI is in an unstable state,\nor for specific screenshot testing scenarios where you need the UI to completely\nsettle before capturing.\nAdvanced features\nThe following features are useful for more complex testing scenarios.\nInteract with multiple windows\nThe UI Automator APIs let you directly interact with and inspect UI\nelements. This is particularly useful for scenarios involving multiple windows,\nsuch as Picture-in-Picture (PiP) mode or split-screen layouts.\n// Find the first window that is in Picture-in-Picture mode\nval\npipWindow\n=\nwindows\n()\n.\nfirst\n{\nit\n.\nisInPictureInPictureMode\n==\ntrue\n}\n// Now you can interact with elements within that specific window\npipWindow\n.\nonElement\n{\ntextAsString\n()\n==\n\"Play\"\n}.\nclick\n()\nScreenshots and visual assertions\nCapture screenshots of the entire screen, specific windows, or\nindividual UI elements directly within your tests. This is helpful for visual\nregression testing and debugging.\nuiautomator\n{\n// Take a screenshot of the entire active window\nval\nfullScreenBitmap\n:\nBitmap\n=\nactiveWindow\n().\ntakeScreenshot\n()\nfullScreenBitmap\n.\nsaveToFile\n(\nFile\n(\n\"/sdcard/Download/full_screen.png\"\n))\n// Take a screenshot of a specific UI element (e.g., a button)\nval\nbuttonBitmap\n:\nBitmap\n=\nonElement\n{\nid\n==\n\"my_button\"\n}.\ntakeScreenshot\n()\nbuttonBitmap\n.\nsaveToFile\n(\nFile\n(\n\"/sdcard/Download/my_button_screenshot.png\"\n))\n// Example: Take a screenshot of a PiP window\nval\npipWindowScreenshot\n=\nwindows\n()\n.\nfirst\n{\nit\n.\nisInPictureInPictureMode\n==\ntrue\n}\n.\ntakeScreenshot\n()\npipWindowScreenshot\n.\nsaveToFile\n(\nFile\n(\n\"/sdcard/Download/pip_screenshot.png\"\n))\n}\nThe\nsaveToFile\nextension function for Bitmap simplifies saving the captured\nimage to a specified path.\nUse ResultsReporter for debugging\nThe\nResultsReporter\nhelps you associate test artifacts, like screenshots,\ndirectly with your test results in Android Studio for easier inspection and\ndebugging.\nuiAutomator\n{\nstartApp\n(\n\"com.example.targetapp\"\n)\nval\nreporter\n=\nResultsReporter\n(\n\"MyTestArtifacts\"\n)\n// Name for this set of results\nval\nfile\n=\nreporter\n.\naddNewFile\n(\nfilename\n=\n\"my_screenshot\"\n,\ntitle\n=\n\"Accessible button image\"\n// Title that appears in Android Studio test results\n)\n// Take a screenshot of an element and save it using the reporter\nonElement\n{\ntextAsString\n()\n==\n\"Accessible button\"\n}\n.\ntakeScreenshot\n()\n.\nsaveToFile\n(\nfile\n)\n// Report the artifacts to instrumentation, making them visible in Android Studio\nreporter\n.\nreportToInstrumentation\n()\n}\nMigrate from older UI Automator versions\nIf you have existing UI Automator tests written with older API surfaces, use the\nfollowing table as a reference to migrate to the modern approach:\nAction type\nOld UI Automator method\nNew UI Automator method\nEntry point\nUiDevice.getInstance(InstrumentationRegistry.getInstrumentation())\nWrap test logic in the\nuiAutomator { ... }\nscope.\nFind UI elements\ndevice.findObject(By.res(\"com.example.app:id/my_button\"))\nonElement { id == \"my\\_button\" }\nFind UI elements\ndevice.findObject(By.text(\"Click Me\"))\nonElement { textAsString() == \"Click Me\" }\nWait for idle UI\ndevice.waitForIdle()\nPrefer\nonElement\n's built-in timeout mechanism; otherwise,\nactiveWindow().waitForStable()\nFind child elements\nManually nested\nfindObject\ncalls\nonElement().onElement()\nchaining\nHandle permission dialogs\nUiAutomator.registerWatcher()\nwatchFor(PermissionDialog)\nContent and code samples on this page are subject to the licenses described in the\nContent License\n. Java and OpenJDK are trademarks or registered trademarks of Oracle and/or its affiliates.\nLast updated 2025-08-08 UTC.",
    "source": "android_official_docs"
  },
  {
    "url": "https://developer.android.com/reference/android/app/UiAutomation",
    "title": "UiAutomation",
    "content": "UiAutomation  |  API reference  |  Android Developers\nSkip to main content\n/\nEnglish\nDeutsch\nEspañol – América Latina\nFrançais\nIndonesia\nPolski\nPortuguês – Brasil\nTiếng Việt\n中文 – 简体\n日本語\n한국어\nAndroid Studio\nSign in\nAPI reference\nAndroid Developers\nDevelop\nAPI reference\nStay organized with collections\nSave and categorize content based on your preferences.\nAdded in\nAPI level 18\nSummary:\nNested Classes\n|\nConstants\n|\nMethods\n|\nInherited Methods\nUiAutomation\nKotlin\n|\nJava\npublic\n  \n  final\n  \n  class\n  UiAutomation\nextends\nObject\njava.lang.Object\n↳\nandroid.app.UiAutomation\nClass for interacting with the device's UI by simulation user actions and\n introspection of the screen content. It relies on the platform accessibility\n APIs to introspect the screen and to perform some actions on the remote view\n tree. It also allows injecting of arbitrary raw input events simulating user\n interaction with keyboards and touch devices. One can think of a UiAutomation\n as a special type of\nAccessibilityService\nwhich does not provide hooks for the service life cycle and exposes other\n APIs that are useful for UI test automation.\nThe APIs exposed by this class are low-level to maximize flexibility when\n developing UI test automation tools and libraries. Generally, a UiAutomation\n client should be using a higher-level library or implement high-level functions.\n For example, performing a tap on the screen requires construction and injecting\n of a touch down and up events which have to be delivered to the system by a\n call to\ninjectInputEvent(android.view.InputEvent, boolean)\n.\nThe APIs exposed by this class operate across applications enabling a client\n to write tests that cover use cases spanning over multiple applications. For\n example, going to the settings application to change a setting and then\n interacting with another application whose behavior depends on that setting.\nSummary\nNested classes\ninterface\nUiAutomation.AccessibilityEventFilter\nListener for filtering accessibility events.\ninterface\nUiAutomation.OnAccessibilityEventListener\nListener for observing the\nAccessibilityEvent\nstream.\nConstants\nint\nFLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES\nUiAutomation suppresses accessibility services by default.\nint\nFLAG_DONT_USE_ACCESSIBILITY\nUiAutomation uses the accessibility subsystem by default.\nint\nROTATION_FREEZE_0\nRotation constant: Freeze rotation to 0 degrees (natural orientation)\nint\nROTATION_FREEZE_180\nRotation constant: Freeze rotation to 180 degrees .\nint\nROTATION_FREEZE_270\nRotation constant: Freeze rotation to 270 degrees .\nint\nROTATION_FREEZE_90\nRotation constant: Freeze rotation to 90 degrees .\nint\nROTATION_FREEZE_CURRENT\nRotation constant: Freeze rotation to its current state.\nint\nROTATION_UNFREEZE\nRotation constant: Unfreeze rotation (rotating the device changes its rotation state).\nPublic methods\nvoid\nadoptShellPermissionIdentity\n(\nString...\npermissions)\nAdopt the permission identity of the shell UID only for the provided permissions.\nvoid\nadoptShellPermissionIdentity\n()\nAdopt the permission identity of the shell UID for all permissions.\nboolean\nclearCache\n()\nClears the accessibility cache.\nvoid\nclearWindowAnimationFrameStats\n()\nThis method was deprecated\n      in API level 33.\n    animation-frames are no-longer used. Use Shared\nFrameTimeline\njank metrics instead.\nboolean\nclearWindowContentFrameStats\n(int windowId)\nClears the frame statistics for the content of a given window.\nvoid\ndropShellPermissionIdentity\n()\nDrop the shell permission identity adopted by a previous call to\nadoptShellPermissionIdentity()\n.\nAccessibilityEvent\nexecuteAndWaitForEvent\n(\nRunnable\ncommand,\nUiAutomation.AccessibilityEventFilter\nfilter, long timeoutMillis)\nExecutes a command and waits for a specific accessibility event up to a\n given wait timeout.\nParcelFileDescriptor\nexecuteShellCommand\n(\nString\ncommand)\nExecutes a shell command.\nParcelFileDescriptor[]\nexecuteShellCommandRw\n(\nString\ncommand)\nExecutes a shell command.\nParcelFileDescriptor[]\nexecuteShellCommandRwe\n(\nString\ncommand)\nExecutes a shell command.\nAccessibilityNodeInfo\nfindFocus\n(int focus)\nFind the view that has the specified focus type.\nAccessibilityNodeInfo\ngetRootInActiveWindow\n()\nGets the root\nAccessibilityNodeInfo\nin the active window.\nAccessibilityServiceInfo\ngetServiceInfo\n()\nGets the an\nAccessibilityServiceInfo\ndescribing this UiAutomation.\nWindowAnimationFrameStats\ngetWindowAnimationFrameStats\n()\nThis method was deprecated\n      in API level 33.\n    animation-frames are no-longer used.\nWindowContentFrameStats\ngetWindowContentFrameStats\n(int windowId)\nGets the frame statistics for a given window.\nList\n<\nAccessibilityWindowInfo\n>\ngetWindows\n()\nGets the windows on the screen associated with the\nUiAutomation\ncontext (usually the\n {@link android.view.Display#DEFAULT_DISPLAY default display).\nSparseArray\n<\nList\n<\nAccessibilityWindowInfo\n>>\ngetWindowsOnAllDisplays\n()\nGets the windows on the screen of all displays.\nvoid\ngrantRuntimePermission\n(\nString\npackageName,\nString\npermission)\nGrants a runtime permission to a package.\nvoid\ngrantRuntimePermissionAsUser\n(\nString\npackageName,\nString\npermission,\nUserHandle\nuserHandle)\nGrants a runtime permission to a package for a user.\nboolean\ninjectInputEvent\n(\nInputEvent\nevent, boolean sync)\nA method for injecting an arbitrary input event.\nboolean\nperformGlobalAction\n(int action)\nPerforms a global action.\nvoid\nrevokeRuntimePermission\n(\nString\npackageName,\nString\npermission)\nRevokes a runtime permission from a package.\nvoid\nrevokeRuntimePermissionAsUser\n(\nString\npackageName,\nString\npermission,\nUserHandle\nuserHandle)\nRevokes a runtime permission from a package.\nvoid\nsetAnimationScale\n(float scale)\nSets the system settings values that control the scaling factor for animations.\nvoid\nsetOnAccessibilityEventListener\n(\nUiAutomation.OnAccessibilityEventListener\nlistener)\nSets a callback for observing the stream of\nAccessibilityEvent\ns.\nboolean\nsetRotation\n(int rotation)\nSets the device rotation.\nvoid\nsetRunAsMonkey\n(boolean enable)\nSets whether this UiAutomation to run in a \"monkey\" mode.\nvoid\nsetServiceInfo\n(\nAccessibilityServiceInfo\ninfo)\nSets the\nAccessibilityServiceInfo\nthat describes how this\n UiAutomation will be handled by the platform accessibility layer.\nBitmap\ntakeScreenshot\n()\nTakes a screenshot.\nBitmap\ntakeScreenshot\n(\nWindow\nwindow)\nUsed to capture a screenshot of a Window.\nString\ntoString\n()\nReturns a string representation of the object.\nvoid\nwaitForIdle\n(long idleTimeoutMillis, long globalTimeoutMillis)\nWaits for the accessibility event stream to become idle, which is not to\n have received an accessibility event within\nidleTimeoutMillis\n.\nInherited methods\nFrom class\njava.lang.Object\nObject\nclone\n()\nCreates and returns a copy of this object.\nboolean\nequals\n(\nObject\nobj)\nIndicates whether some other object is \"equal to\" this one.\nvoid\nfinalize\n()\nCalled by the garbage collector on an object when garbage collection\n determines that there are no more references to the object.\nfinal\nClass\n<?>\ngetClass\n()\nReturns the runtime class of this\nObject\n.\nint\nhashCode\n()\nReturns a hash code value for the object.\nfinal\n        \n        void\nnotify\n()\nWakes up a single thread that is waiting on this object's\n monitor.\nfinal\n        \n        void\nnotifyAll\n()\nWakes up all threads that are waiting on this object's monitor.\nString\ntoString\n()\nReturns a string representation of the object.\nfinal\n        \n        void\nwait\n(long timeoutMillis, int nanos)\nCauses the current thread to wait until it is awakened, typically\n by being\nnotified\nor\ninterrupted\n, or until a\n certain amount of real time has elapsed.\nfinal\n        \n        void\nwait\n(long timeoutMillis)\nCauses the current thread to wait until it is awakened, typically\n by being\nnotified\nor\ninterrupted\n, or until a\n certain amount of real time has elapsed.\nfinal\n        \n        void\nwait\n()\nCauses the current thread to wait until it is awakened, typically\n by being\nnotified\nor\ninterrupted\n.\nConstants\nFLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES\nAdded in\nAPI level 24\npublic static final int FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES\nUiAutomation suppresses accessibility services by default. This flag specifies that\n existing accessibility services should continue to run, and that new ones may start.\n This flag is set when obtaining the UiAutomation from\nInstrumentation.getUiAutomation(int)\n.\nConstant Value:\n      \n          1\n          (0x00000001)\nFLAG_DONT_USE_ACCESSIBILITY\nAdded in\nAPI level 31\npublic static final int FLAG_DONT_USE_ACCESSIBILITY\nUiAutomation uses the accessibility subsystem by default. This flag provides an option to\n eliminate the overhead of engaging the accessibility subsystem for tests that do not need to\n interact with the user interface. Setting this flag disables methods that rely on\n accessibility. This flag is set when obtaining the UiAutomation from\nInstrumentation.getUiAutomation(int)\n.\nConstant Value:\n      \n          2\n          (0x00000002)\nROTATION_FREEZE_0\nAdded in\nAPI level 18\npublic static final int ROTATION_FREEZE_0\nRotation constant: Freeze rotation to 0 degrees (natural orientation)\nConstant Value:\n      \n          0\n          (0x00000000)\nROTATION_FREEZE_180\nAdded in\nAPI level 18\npublic static final int ROTATION_FREEZE_180\nRotation constant: Freeze rotation to 180 degrees .\nConstant Value:\n      \n          2\n          (0x00000002)\nROTATION_FREEZE_270\nAdded in\nAPI level 18\npublic static final int ROTATION_FREEZE_270\nRotation constant: Freeze rotation to 270 degrees .\nConstant Value:\n      \n          3\n          (0x00000003)\nROTATION_FREEZE_90\nAdded in\nAPI level 18\npublic static final int ROTATION_FREEZE_90\nRotation constant: Freeze rotation to 90 degrees .\nConstant Value:\n      \n          1\n          (0x00000001)\nROTATION_FREEZE_CURRENT\nAdded in\nAPI level 18\npublic static final int ROTATION_FREEZE_CURRENT\nRotation constant: Freeze rotation to its current state.\nConstant Value:\n      \n          -1\n          (0xffffffff)\nROTATION_UNFREEZE\nAdded in\nAPI level 18\npublic static final int ROTATION_UNFREEZE\nRotation constant: Unfreeze rotation (rotating the device changes its rotation state).\nConstant Value:\n      \n          -2\n          (0xfffffffe)\nPublic methods\nadoptShellPermissionIdentity\nAdded in\nAPI level 29\npublic void adoptShellPermissionIdentity (\nString...\npermissions)\nAdopt the permission identity of the shell UID only for the provided permissions.\n This allows you to call APIs protected permissions which normal apps cannot hold\n but are granted to the shell UID. If you already adopted shell permissions by calling\n this method, or\nadoptShellPermissionIdentity()\na subsequent call will replace any\n previous adoption.\nNote:\nThis method behave differently from\nadoptShellPermissionIdentity()\n. Only the listed permissions will use the shell\n identity and other permissions will still check against the original UID\nParameters\npermissions\nString\n: The permissions to adopt or\nnull\nto adopt all.\nSee also:\nadoptShellPermissionIdentity()\ndropShellPermissionIdentity()\nadoptShellPermissionIdentity\nAdded in\nAPI level 29\npublic void adoptShellPermissionIdentity ()\nAdopt the permission identity of the shell UID for all permissions. This allows\n you to call APIs protected permissions which normal apps cannot hold but are\n granted to the shell UID. If you already adopted all shell permissions by calling\n this method or\nadoptShellPermissionIdentity(java.lang.String)\na subsequent call will\n replace any previous adoption. Note that your permission state becomes that of the shell UID\n and it is not a combination of your and the shell UID permissions.\nNote:\nCalling this method adopts all shell permissions and overrides\n any subset of adopted permissions via\nadoptShellPermissionIdentity(java.lang.String)\n.\nSee also:\nadoptShellPermissionIdentity(String)\ndropShellPermissionIdentity()\nclearCache\nAdded in\nAPI level 34\npublic boolean clearCache ()\nClears the accessibility cache.\nReturns\nboolean\ntrue\nif the cache was cleared\nSee also:\nAccessibilityService.clearCache()\nclearWindowAnimationFrameStats\nAdded in\nAPI level 21\nDeprecated in\nAPI level\n      33\npublic void clearWindowAnimationFrameStats ()\nThis method was deprecated\n      in API level 33.\nanimation-frames are no-longer used. Use Shared\nFrameTimeline\njank metrics instead.\nClears the window animation rendering statistics. These statistics contain\n information about the most recently rendered window animation frames, i.e.\n for window transition animations.\nSee also:\nWindowAnimationFrameStats\ngetWindowAnimationFrameStats()\nR.styleable.WindowAnimation\nclearWindowContentFrameStats\nAdded in\nAPI level 21\npublic boolean clearWindowContentFrameStats (int windowId)\nClears the frame statistics for the content of a given window. These\n statistics contain information about the most recently rendered content\n frames.\nParameters\nwindowId\nint\n: The window id.\nReturns\nboolean\nWhether the window is present and its frame statistics\n         were cleared.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nSee also:\nWindowContentFrameStats\ngetWindowContentFrameStats(int)\ngetWindows()\nAccessibilityWindowInfo.getId()\ndropShellPermissionIdentity\nAdded in\nAPI level 29\npublic void dropShellPermissionIdentity ()\nDrop the shell permission identity adopted by a previous call to\nadoptShellPermissionIdentity()\n. If you did not adopt the shell permission\n identity this method would be a no-op.\nSee also:\nadoptShellPermissionIdentity()\nexecuteAndWaitForEvent\nAdded in\nAPI level 18\npublic\nAccessibilityEvent\nexecuteAndWaitForEvent (\nRunnable\ncommand,\nUiAutomation.AccessibilityEventFilter\nfilter, \n                long timeoutMillis)\nExecutes a command and waits for a specific accessibility event up to a\n given wait timeout. To detect a sequence of events one can implement a\n filter that keeps track of seen events of the expected sequence and\n returns true after the last event of that sequence is received.\nNote:\nIt is caller's responsibility to recycle the returned event.\nParameters\ncommand\nRunnable\n: The command to execute.\nfilter\nUiAutomation.AccessibilityEventFilter\n: Filter that recognizes the expected event.\ntimeoutMillis\nlong\n: The wait timeout in milliseconds.\nReturns\nAccessibilityEvent\nThrows\nTimeoutException\nIf the expected event is not received within the timeout.\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nexecuteShellCommand\nAdded in\nAPI level 21\npublic\nParcelFileDescriptor\nexecuteShellCommand (\nString\ncommand)\nExecutes a shell command. This method returns a file descriptor that points\n to the standard output stream. The command execution is similar to running\n \"adb shell\n\" from a host connected to the device.\nNote:\nIt is your responsibility to close the returned file\n descriptor once you are done reading.\nParameters\ncommand\nString\n: The command to execute.\nReturns\nParcelFileDescriptor\nA file descriptor to the standard output stream.\nSee also:\nadoptShellPermissionIdentity()\nexecuteShellCommandRw\nAdded in\nAPI level 31\npublic\nParcelFileDescriptor[]\nexecuteShellCommandRw (\nString\ncommand)\nExecutes a shell command. This method returns two file descriptors,\n one that points to the standard output stream (element at index 0), and one that points\n to the standard input stream (element at index 1). The command execution is similar\n to running \"adb shell\n\" from a host connected to the device.\nNote:\nIt is your responsibility to close the returned file\n descriptors once you are done reading/writing.\nParameters\ncommand\nString\n: The command to execute.\n This value cannot be\nnull\n.\nReturns\nParcelFileDescriptor[]\nFile descriptors (out, in) to the standard output/input streams.\n\n This value cannot be\nnull\n.\nexecuteShellCommandRwe\nAdded in\nAPI level 34\npublic\nParcelFileDescriptor[]\nexecuteShellCommandRwe (\nString\ncommand)\nExecutes a shell command. This method returns three file descriptors,\n one that points to the standard output stream (element at index 0), one that points\n to the standard input stream (element at index 1), and one points to\n standard error stream (element at index 2). The command execution is similar\n to running \"adb shell\n\" from a host connected to the device.\nNote:\nIt is your responsibility to close the returned file\n descriptors once you are done reading/writing.\nParameters\ncommand\nString\n: The command to execute.\n This value cannot be\nnull\n.\nReturns\nParcelFileDescriptor[]\nFile descriptors (out, in, err) to the standard output/input/error streams.\n\n This value cannot be\nnull\n.\nfindFocus\nAdded in\nAPI level 21\npublic\nAccessibilityNodeInfo\nfindFocus (int focus)\nFind the view that has the specified focus type. The search is performed\n across all windows.\nNote:\nIn order to access the windows you have to opt-in\n to retrieve the interactive windows by setting the\nAccessibilityServiceInfo.FLAG_RETRIEVE_INTERACTIVE_WINDOWS\nflag.\n Otherwise, the search will be performed only in the active window.\nParameters\nfocus\nint\n: The focus to find. One of\nAccessibilityNodeInfo.FOCUS_INPUT\nor\nAccessibilityNodeInfo.FOCUS_ACCESSIBILITY\n.\nReturns\nAccessibilityNodeInfo\nThe node info of the focused view or null.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nSee also:\nAccessibilityNodeInfo.FOCUS_INPUT\nAccessibilityNodeInfo.FOCUS_ACCESSIBILITY\ngetRootInActiveWindow\nAdded in\nAPI level 18\npublic\nAccessibilityNodeInfo\ngetRootInActiveWindow ()\nGets the root\nAccessibilityNodeInfo\nin the active window.\nReturns\nAccessibilityNodeInfo\nThe root info.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\ngetServiceInfo\nAdded in\nAPI level 18\npublic\nAccessibilityServiceInfo\ngetServiceInfo ()\nGets the an\nAccessibilityServiceInfo\ndescribing this UiAutomation.\n This method is useful if one wants to change some of the dynamically\n configurable properties at runtime.\nReturns\nAccessibilityServiceInfo\nThe accessibility service info.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nSee also:\nAccessibilityServiceInfo\ngetWindowAnimationFrameStats\nAdded in\nAPI level 21\nDeprecated in\nAPI level\n      33\npublic\nWindowAnimationFrameStats\ngetWindowAnimationFrameStats ()\nThis method was deprecated\n      in API level 33.\nanimation-frames are no-longer used.\nGets the window animation frame statistics. These statistics contain\n information about the most recently rendered window animation frames, i.e.\n for window transition animations.\nA typical usage requires clearing the window animation frame statistics via\nclearWindowAnimationFrameStats()\nfollowed by an interaction that causes\n a window transition which uses a window animation and finally getting the window\n animation frame statistics by calling this method.\n// Start with a clean slate.\n uiAutimation.clearWindowAnimationFrameStats();\n\n // Do stuff to trigger a window transition.\n\n // Get the frame statistics.\n WindowAnimationFrameStats stats = uiAutomation.getWindowAnimationFrameStats();\nReturns\nWindowAnimationFrameStats\nThe window animation frame statistics.\nSee also:\nWindowAnimationFrameStats\nclearWindowAnimationFrameStats()\nR.styleable.WindowAnimation\ngetWindowContentFrameStats\nAdded in\nAPI level 21\npublic\nWindowContentFrameStats\ngetWindowContentFrameStats (int windowId)\nGets the frame statistics for a given window. These statistics contain\n information about the most recently rendered content frames.\nA typical usage requires clearing the window frame statistics via\nclearWindowContentFrameStats(int)\nfollowed by an interaction with the UI and\n finally getting the window frame statistics via calling this method.\n// Assume we have at least one window.\n final int windowId = getWindows().get(0).getId();\n\n // Start with a clean slate.\n uiAutimation.clearWindowContentFrameStats(windowId);\n\n // Do stuff with the UI.\n\n // Get the frame statistics.\n WindowContentFrameStats stats = uiAutomation.getWindowContentFrameStats(windowId);\nParameters\nwindowId\nint\n: The window id.\nReturns\nWindowContentFrameStats\nThe window frame statistics, or null if the window is not present.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nSee also:\nWindowContentFrameStats\nclearWindowContentFrameStats(int)\ngetWindows()\nAccessibilityWindowInfo.getId()\ngetWindows\nAdded in\nAPI level 21}\npublic\nList\n<\nAccessibilityWindowInfo\n> getWindows ()\nGets the windows on the screen associated with the\nUiAutomation\ncontext (usually the\n {@link android.view.Display#DEFAULT_DISPLAY default display).\nThis method returns only the windows that a sighted user can interact with, as opposed to\n all windows.\nFor example, if there is a modal dialog shown and the user cannot touch\n anything behind it, then only the modal window will be reported\n (assuming it is the top one). For convenience the returned windows\n are ordered in a descending layer order, which is the windows that\n are higher in the Z-order are reported first.\nNote:\nIn order to access the windows you have to opt-in\n to retrieve the interactive windows by setting the\n {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.\nReturns\nList\n<\nAccessibilityWindowInfo\n>\nThe windows if there are windows such, otherwise an empty list.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\ngetWindowsOnAllDisplays\nAdded in\nAPI level 30\npublic\nSparseArray\n<\nList\n<\nAccessibilityWindowInfo\n>> getWindowsOnAllDisplays ()\nGets the windows on the screen of all displays. This method returns only the windows\n that a sighted user can interact with, as opposed to all windows.\n For example, if there is a modal dialog shown and the user cannot touch\n anything behind it, then only the modal window will be reported\n (assuming it is the top one). For convenience the returned windows\n are ordered in a descending layer order, which is the windows that\n are higher in the Z-order are reported first.\nNote:\nIn order to access the windows you have to opt-in\n to retrieve the interactive windows by setting the\nAccessibilityServiceInfo.FLAG_RETRIEVE_INTERACTIVE_WINDOWS\nflag.\nReturns\nSparseArray\n<\nList\n<\nAccessibilityWindowInfo\n>>\nThe windows of all displays if there are windows and the service is can retrieve\n         them, otherwise an empty list. The key of SparseArray is display ID.\n This value cannot be\nnull\n.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\ngrantRuntimePermission\nAdded in\nAPI level 28\npublic void grantRuntimePermission (\nString\npackageName,\nString\npermission)\nGrants a runtime permission to a package.\nParameters\npackageName\nString\n: The package to which to grant.\npermission\nString\n: The permission to grant.\nThrows\nSecurityException\nif unable to grant the permission.\ngrantRuntimePermissionAsUser\nAdded in\nAPI level 28\npublic void grantRuntimePermissionAsUser (\nString\npackageName,\nString\npermission,\nUserHandle\nuserHandle)\nGrants a runtime permission to a package for a user.\nParameters\npackageName\nString\n: The package to which to grant.\npermission\nString\n: The permission to grant.\nuserHandle\nUserHandle\nThrows\nSecurityException\nif unable to grant the permission.\ninjectInputEvent\nAdded in\nAPI level 18\npublic boolean injectInputEvent (\nInputEvent\nevent, \n                boolean sync)\nA method for injecting an arbitrary input event.\n\n This method waits for all window container animations and surface operations to complete.\nNote:\nIt is caller's responsibility to recycle the event.\nParameters\nevent\nInputEvent\n: the event to inject\nsync\nboolean\n: whether to inject the event synchronously\nReturns\nboolean\ntrue\nif event injection succeeded\nperformGlobalAction\nAdded in\nAPI level 18\npublic boolean performGlobalAction (int action)\nPerforms a global action. Such an action can be performed at any moment\n regardless of the current application or user location in that application.\n For example going back, going home, opening recents, etc.\nParameters\naction\nint\n: The action to perform.\nReturns\nboolean\nWhether the action was successfully performed.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nSee also:\nAccessibilityService.GLOBAL_ACTION_BACK\nAccessibilityService.GLOBAL_ACTION_HOME\nAccessibilityService.GLOBAL_ACTION_NOTIFICATIONS\nAccessibilityService.GLOBAL_ACTION_RECENTS\nrevokeRuntimePermission\nAdded in\nAPI level 28\npublic void revokeRuntimePermission (\nString\npackageName,\nString\npermission)\nRevokes a runtime permission from a package.\nParameters\npackageName\nString\n: The package to which to grant.\npermission\nString\n: The permission to grant.\nThrows\nSecurityException\nif unable to revoke the permission.\nrevokeRuntimePermissionAsUser\nAdded in\nAPI level 28\npublic void revokeRuntimePermissionAsUser (\nString\npackageName,\nString\npermission,\nUserHandle\nuserHandle)\nRevokes a runtime permission from a package.\nParameters\npackageName\nString\n: The package to which to grant.\npermission\nString\n: The permission to grant.\nuserHandle\nUserHandle\nThrows\nSecurityException\nif unable to revoke the permission.\nsetAnimationScale\nAdded in\nAPI level 33\npublic void setAnimationScale (float scale)\nSets the system settings values that control the scaling factor for animations. The scale\n controls the animation playback speed for animations that respect these settings. Animations\n that do not respect the settings values will not be affected by this function. A lower scale\n value results in a faster speed. A value of\n0\ndisables animations entirely. When\n animations are disabled services receive window change events more quickly which can reduce\n the potential by confusion by reducing the time during which windows are in transition.\nParameters\nscale\nfloat\n: The scaling factor for all animations.\nSee also:\nAccessibilityEvent.TYPE_WINDOWS_CHANGED\nAccessibilityEvent.TYPE_WINDOW_STATE_CHANGED\nSettings.Global.WINDOW_ANIMATION_SCALE\nSettings.Global.TRANSITION_ANIMATION_SCALE\nSettings.Global.ANIMATOR_DURATION_SCALE\nsetOnAccessibilityEventListener\nAdded in\nAPI level 18\npublic void setOnAccessibilityEventListener (\nUiAutomation.OnAccessibilityEventListener\nlistener)\nSets a callback for observing the stream of\nAccessibilityEvent\ns.\n The callbacks are delivered on the main application thread.\nParameters\nlistener\nUiAutomation.OnAccessibilityEventListener\n: The callback.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nsetRotation\nAdded in\nAPI level 18\npublic boolean setRotation (int rotation)\nSets the device rotation. A client can freeze the rotation in\n desired state or freeze the rotation to its current state or\n unfreeze the rotation (rotating the device changes its rotation\n state).\nParameters\nrotation\nint\n: The desired rotation.\nReturns\nboolean\nWhether the rotation was set successfully.\nSee also:\nROTATION_FREEZE_0\nROTATION_FREEZE_90\nROTATION_FREEZE_180\nROTATION_FREEZE_270\nROTATION_FREEZE_CURRENT\nROTATION_UNFREEZE\nsetRunAsMonkey\nAdded in\nAPI level 18\npublic void setRunAsMonkey (boolean enable)\nSets whether this UiAutomation to run in a \"monkey\" mode. Applications can query whether\n they are executed in a \"monkey\" mode, i.e. run by a test framework, and avoid doing\n potentially undesirable actions such as calling 911 or posting on public forums etc.\nParameters\nenable\nboolean\n: whether to run in a \"monkey\" mode or not. Default is not.\nSee also:\nActivityManager.isUserAMonkey()\nsetServiceInfo\nAdded in\nAPI level 18\npublic void setServiceInfo (\nAccessibilityServiceInfo\ninfo)\nSets the\nAccessibilityServiceInfo\nthat describes how this\n UiAutomation will be handled by the platform accessibility layer.\nParameters\ninfo\nAccessibilityServiceInfo\n: The info.\nThrows\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nSee also:\nAccessibilityServiceInfo\ntakeScreenshot\nAdded in\nAPI level 18\npublic\nBitmap\ntakeScreenshot ()\nTakes a screenshot.\nReturns\nBitmap\nThe screenshot bitmap on success, null otherwise.\ntakeScreenshot\nAdded in\nAPI level 34\npublic\nBitmap\ntakeScreenshot (\nWindow\nwindow)\nUsed to capture a screenshot of a Window. This can return null in the following cases:\n 1. Window content hasn't been layed out.\n 2. Window doesn't have a valid SurfaceControl\n 3. An error occurred in SurfaceFlinger when trying to take the screenshot.\nParameters\nwindow\nWindow\n: Window to take a screenshot of\n\n This value cannot be\nnull\n.\nReturns\nBitmap\nThe screenshot bitmap on success, null otherwise.\ntoString\nAdded in\nAPI level 18\npublic\nString\ntoString ()\nReturns a string representation of the object.\nReturns\nString\na string representation of the object.\nwaitForIdle\nAdded in\nAPI level 18\npublic void waitForIdle (long idleTimeoutMillis, \n                long globalTimeoutMillis)\nWaits for the accessibility event stream to become idle, which is not to\n have received an accessibility event within\nidleTimeoutMillis\n.\n The total time spent to wait for an idle accessibility event stream is bounded\n by the\nglobalTimeoutMillis\n.\nParameters\nidleTimeoutMillis\nlong\n: The timeout in milliseconds between two events\n            to consider the device idle.\nglobalTimeoutMillis\nlong\n: The maximal global timeout in milliseconds in\n            which to wait for an idle state.\nThrows\nTimeoutException\nIf no idle state was detected within\nglobalTimeoutMillis.\nIllegalStateException\nIf the connection to the accessibility subsystem is not\n            established.\nContent and code samples on this page are subject to the licenses described in the\nContent License\n. Java and OpenJDK are trademarks or registered trademarks of Oracle and/or its affiliates.\nLast updated 2025-03-13 UTC.",
    "source": "android_official_docs"
  }
]